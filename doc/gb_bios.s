; Game Boy BIOS, disassembled by yours truly
; 8/10/2022

ld sp, 0xFFFE        ; 0x00: set stack pointer to 0xFFFE
xor a                ; 0x03: set register a to 0 (zero flag = 1)
ld hl, 0x9FFF        ; 0x04: set hl to 0x9FFF (h = 0x9F, l = 0xFF)
ld (hl-), a          ; 0x07: write a (= 0) to 0x9FFE
bit 7, h             ; 0x08: check bit 7 of h (zero flag = 0)
jr nz, 0xFB          ; 0x0A: increment pc by 0xFD (jump to 0x07)
ld hl, 0xFF26        ; 0x0C: set hl to 0xFF26 (h = 0xFF, l = 0x26)
ld c, 0x11           ; 0x0F: set c to 0x11
ld a, 0x80           ; 0x11: set a to 0x80
ld (hl-), a          ; 0x13: write a (= 0x80) to 0xFF25
ld (c), a            ; 0x14: write a (= 0x80) to 0xFF00 + c (= 0xFF11)
inc c                ; 0x15: increment c by 1
ld a, 0xF3           ; 0x16: set a to 0xF3
ld (c), a            ; 0x18: write a (= 0xF3) to 0xFF00 + c (= 0xFF12)
ld (hl-), a          ; 0x19: write a (= 0xF3) to 0xFF25
ld a, 0x77           ; 0x1A: set a to 0x77
ld (hl), a           ; 0x1C: write a (= 0x77) to 0xFF26
ld a, 0xFC           ; 0x1D: set a to 0xFC
ldh 0x47, a          ; 0x1F: write a (= 0xFC) to 0xFF47
ld de, 0x0104        ; 0x21: set de to 0x0104 (d = 0x01, e = 0x04)
ld hl, 0x8010        ; 0x24: set hl to 0x8010 (h = 0x80, l = 0x10)
ld a, (de)           ; 0x27: write the value at de (0x0104 -> 0x00) to a
call 0x0095          ; 0x28: store sp and jump pc to 0x0095
call 0x0096          ; 0x2B: store sp and jump pc to 0x0096
inc de               ; 0x2E: increment de (de = 0x0105;  d = 0x01, e = 0x05)
ld a, e              ; 0x2F: write the value of e (0x05) to a
cp 0x34              ; 0x30: compare 0x34 to a: sets zero, subtraction, and carry flags
jr nz, 0xF3          ; 0x32: adjust pc by 0xF5 (jump to 0x27)
ld de, 0x00D8        ; 0x34: set de to 0x00D8 (d = 0x00, e = 0xD8)
ld b, 0x08           ; 0x37: set b to 0x08
ld a, (de)           ; 0x39: write the value at de (0x00D8 -> 0x0) to a
inc de               ; 0x3A: increment de (de = 0x00D9;  d = 0x00, e = 0xD9)
ld (hl+), a          ; 0x3B: write the value in a to hl + 1 (= 0x8011)
inc hl               ; 0x3C: increment hl (= 0x8012;  h = 0x80, l = 0x12)
dec b                ; 0x3D: decrement b (= 0x07)
jr nz, 0xF9          ; 0x3E: adjust pc by 0xFA (jump to 0x39)
ld a, 0x19           ; 0x40: set a to 0x19
ld (0x9910), a       ; 0x42: write a to the memory at 0x9910 (0x9910 -> 0x19)
ld hl, 0x992F        ; 0x45: set hl to 0x992F (h = 0x99, l = 0x2f)
ld c, 0x0C           ; 0x48: set c to 0x0C
dec a                ; 0x4A: decrement a (= 0x18)
jr z, 0x08           ; 0x4B: increment pc by 0x10 (go to 0x55)
ld (hl-), a          ; 0x4D: write a to hl - 1 (0x992E -> 0x18)
dec c                ; 0x4E: decrement c (= 0x0B)
jr nz, 0xF9          ; 0x4F: increment pc by 0xFB (go to 0x4A)
ld l, 0x0F           ; 0x51: set l to 0x0f
jr 0xF3              ; 0x53: increment pc by 0xF5 (go to 0x48)
ld h, a              ; 0x55: set h to a (h = 0x18)
ld a, 0x64           ; 0x56: set a to 0x64
ld d, a              ; 0x58: set d to a (d = 0x64)
ldh (0x42), a        ; 0x59: set 0xFF42 to a (0xFF42 -> 0x64)
ld a, 0x91           ; 0x5B: set a to 0x91
ldh (0x40), a        ; 0x5D: set 0xFF40 to a (0xFF42 -> 0x91)
inc b                ; 0x5F: increment b ( = 1)
ld e, 0x02           ; 0x60: set e to 0x02
ld c, 0x0C           ; 0x62: set c to 0x0C
ldh a, (0x44)        ; 0x64: set a to the value at 0xFF44
cp 0x90              ; 0x66: compare 0x90 to a
jr nz, 0xFA          ; 0x68: increase pc by 0xFC (go to 0x64)
dec c                ; 0x6A: decrement c (= 0x0B)
jr nz, 0xF7          ; 0x6B: increment pc by 0xF9 (go to 0x64)
dec e                ; 0x6D: decrement e (= 0x01)
jr nz, 0xF2          ; 0x6E: increase pc by 0xF4 (go to 0x62)
ld c, 0x13           ; 0x70: set c to 0x13
inc h                ; 0x72: increment h (= 0x19)
ld a, h              ; 0x73: set a to h (a = 0x19)
ld e, 0x83           ; 0x74: set e to 0x83
cp 0x62              ; 0x76: compare 0x62 to a
jr z, 0x06           ; 0x78: increase pc by 0x08 (go to 0x80)
ld e, 0xC1           ; 0x7A: set e to 0xC1
cp 0x64              ; 0x7C: compare 0x64 to a
jp nz, 0x06          ; 0x7E: increment pc by 0x08 (go to 0x86)
ld a, e              ; 0x80: set a to e (a = 0xC1)
ld (c), a            ; 0x81: set the value at 0xFF13 to a (0xFF13 -> 0xC1)
inc c                ; 0x82: increment c (= 0x14)
ld a, 0x87           ; 0x83: set a to 0x87
ld (c), a            ; 0x85: set the value at 0xFF14 to a (0xFF14 -> 0xC1)
ldh a, (0x42)        ; 0x86: write the value at 0xFF42 to a
sub b                ; 0x88: set a to a - b
ldh (0x42), a        ; 0x89: write a to the value at 0xFF42
dec d                ; 0x8B: decrement d
jr nz, 0xD2          ; 0x8C: increment pc by 0xD4 (go to 0x60)
dec b                ; 0x8E: decrement b (b = 0)
jr nz, 0x4F          ; 0x8F: increment pc by 0x51 (jump to 0xE0)
ld d, 0x20           ; 0x91: set d to 0x20
jr 0xCB              ; 0x93: increase pc by 0xCD (jump to 0x60)
ld c, a              ; 0x95: set c to a
ld b, 0x04           ; 0x96: set b to 0x04
push bc              ; 0x98: write bc into stack pointer
rl c                 ; 0x99: rotate c with carry
rla                  ; 0x9B: rotate a with carry
pop bc               ; 0x9C: reset stack pointer
rl c                 ; 0x9D: rotate c with carry
rla                  ; 0x9F: rotate a with carry
dec b                ; 0xA0: decrement b (= 0x03)
jr nz, 0xF5          ; 0xA1: increment pc by 0xF5 (go to 0x98)
ld (hl+), a          ; 0xA3: write a to hl + 1
inc hl               ; 0xA4: increment hl
ld (hl+), a          ; 0xA5: write a to hl + 1
inc hl               ; 0xA6: increment hl
ret                  ; 0xA7: return to caller

; nintendo logo (0xA8)
0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,

; video data (0xD8)
0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C, ; video data

ld hl, 0x0104        ; 0xE0: set hl to 0x0104 (h = 0x01, l = 0x04) (point at cart's nintendo logo)
ld de, 0x00A8        ; 0xE3: set de to 0x00A8 (d = 0x00, e = 0xA8) (point at bios's nintendo logo)
ld a, (de)           ; 0xE6: write the value at 0x00A8 to a
inc de               ; 0xE7: increment de (de = 0x00A9, d = 0x00, e = 0xA9)
cp (hl)              ; 0xE8: compare 0x0104 to a (compare cart logo to bios logo)
jp nz, 0xFE          ; 0xE9: increase pc by 0xFE (lock up if the logos don't match)
inc hl               ; 0xEB: increment hl (hl = 0x0105, h = 0x01, l = 0x05)
ld a, l              ; 0xEC: set a to l (a = 0x05)
cp 0x34              ; 0xED: compare 0x34 to a
jp nz, 0xF5          ; 0xEF: increment pc by 0xF5 (go to 0xE6)
ld b, 0x19           ; 0xF1: set b to 0x19
ld a, b              ; 0xF3: set a to b (a = 0x19)
add a, (hl)          ; 0xF4: add a and 0x0105
inc hl               ; 0xF5: increment hl (hl = 0x0106, h = 0x01, l = 0x06)
dec b                ; 0xF6: decrement b (b = 0x18)
jr nz, 0xFB          ; 0xF7: increment pc by 0xFB (go to 0xF4)
add a, (hl)          ; 0xF9: add a and 0x0106
jr nz, 0xFE          ; 0xFA: lock up if 0x19 + bytes from 0x0134-0x014D don't add to 0x00
ld a, 0x01           ; 0xFC: set a to 0x01
ldh (0x50), a        ; 0xFE: write a to 0xFF50
